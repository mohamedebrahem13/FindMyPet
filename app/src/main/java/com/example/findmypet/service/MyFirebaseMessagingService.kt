package com.example.findmypet.service

import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Build
import android.util.Log
import androidx.annotation.RequiresApi
import androidx.core.app.NotificationCompat
import com.example.findmypet.R
import com.example.findmypet.activities.MainActivity
import com.example.findmypet.common.Constant
import com.example.findmypet.data.repository.FirebaseAuthenticator
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.IOException
import java.net.HttpURLConnection
import java.net.URL
import javax.inject.Inject


class MyFirebaseMessagingService : FirebaseMessagingService() {

    @Inject
    lateinit var authenticator: FirebaseAuthenticator
    @RequiresApi(Build.VERSION_CODES.S)
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        remoteMessage.from?.let { from ->
            Log.d("GET_NOTIFICATION", "Received message from: $from")

            val notification = remoteMessage.notification
            val title = notification?.title ?: "Default Title"
            val body = notification?.body ?: "Default Body"
            val imageUrl = notification?.imageUrl ?: "Default imageUrl"
            Log.d("Notification", "Received imageUrl: $imageUrl")


            // Check if the message is from a specific topic
            if (from == "/topics/new_pet") {
                Log.d("from_topics", "/topics/new_pet")

                createNotification(title, body, imageUrl.toString(), Constant.channelId)
            } else {
                createNotification(title, body, imageUrl .toString(), Constant.channelId)
            }
        }
    }

    override fun onNewToken(token: String) {
        super.onNewToken(token)
        // Update the token whenever a new one is generated by FCM
        Log.d("FCM_TOKEN", "Refreshed token: $token")

        // Call the method in your authenticator to update the token for the current user
        CoroutineScope(Dispatchers.IO).launch {
            authenticator.updateTokenForCurrentUser(token)
        }
    }

    @RequiresApi(Build.VERSION_CODES.S)
    private fun createNotification(title: String, body: String, imageUrl: String, channelId: String) {
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE
        )

        // Prepare notification builder
        val notificationBuilder = NotificationCompat.Builder(this, channelId)
            .setContentTitle(title)
            .setContentText(body)
            .setSmallIcon(R.drawable.pet1)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)

        // Load and set image if imageUrl is not blank
        if (imageUrl.isNotBlank()) {
            val bitmap = getBitmapFromUrl(imageUrl)
            if (bitmap != null) {
                notificationBuilder.setStyle(NotificationCompat.BigPictureStyle()
                    .bigPicture(bitmap))
            } else {
                Log.e("Notification", "Bitmap is null for imageUrl: $imageUrl")
            }
        } else {
            Log.e("Notification", "imageUrl is blank or null")
        }

        // Build the notification
        val notification = notificationBuilder.build()

        // Notify with unique ID
        val uniqueNotificationId = System.currentTimeMillis().toInt()
        notificationManager.notify(uniqueNotificationId, notification)
    }

    // Function to fetch bitmap from URL
    private fun getBitmapFromUrl(imageUrl: String): Bitmap? {
        if (imageUrl.isBlank()) {
            Log.e("Notification", "Image URL is blank or null")
            return null
        }

        return try {
            val url = URL(imageUrl)
            val connection = url.openConnection() as HttpURLConnection
            connection.doInput = true
            connection.connect()
            val inputStream = connection.inputStream
            BitmapFactory.decodeStream(inputStream)
        } catch (e: IOException) {
            Log.e("Notification", "Error loading image from URL: ${e.message}")
            null
        }
    }

}
